(()=>{"use strict";var e={426:(e,n,r)=>{r.d(n,{Z:()=>c});var t=r(15),o=r.n(t),a=r(645),i=r.n(a)()(o());i.push([e.id,'* {\r\n    font-family: "Open Sans", sans-serif;\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\n\r\n:root {\r\n    --main-bg-color: #343233;\r\n    --color-a: #efeae1;\r\n    --header-color: #584b4f;\r\n    --enfasis-a: #81c08b;\r\n    --box-game: #ffd152;\r\n}\r\n\r\nhtml {\r\n    min-height: 100%;\r\n    position: relative;\r\n}\r\n\r\nul {\r\n    list-style: none;\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    margin-top: 20px;\r\n}\r\nimg {\r\n    border-radius: 5px;\r\n}\r\n\r\n/* Header */\r\n.contenedorHeader {\r\n    cursor: pointer;\r\n    width: 100%;\r\n    height: 150px;\r\n    background: var(--header-color);\r\n    color: var(--color-a);\r\n    text-align: center;\r\n}\r\n.contenedorHeader h1 {\r\n    padding-top: 10px;\r\n    font-size: 50px;\r\n}\r\n.contenedorHeader h1:hover {\r\n    transform: scale(1.05);\r\n    transition: 0.3s ease all;\r\n}\r\n\r\n.contenedorHeader a {\r\n    color: var(--color-a);\r\n    text-decoration: none;\r\n}\r\n.contenedorHeader a:hover {\r\n    color: var(--enfasis-a);\r\n    font-weight: 600;\r\n}\r\n\r\n/* Tabla de Juego */\r\n.contenedorTable {\r\n    width: 100%;\r\n    height: 700px;\r\n    background: var(--main-bg-color);\r\n    display: flex;\r\n}\r\n\r\n/* Footer */\r\n.contenedorFooter {\r\n    background-color: #efeae1;\r\n    position: absolute;\r\n    bottom: 0;\r\n    width: 100%;\r\n    height: 80px;\r\n    color: #574c4f;\r\n}\r\n.contenedorFooter a {\r\n    color: #574c4f;\r\n    text-decoration: none;\r\n}\r\n.contenedorFooter a:hover {\r\n    font-weight: 600;\r\n}\r\nspan {\r\n    text-align: center;\r\n    cursor: pointer;\r\n}\r\n\r\n/* Flujo de juego */\r\n.game {\r\n    width: 40%;\r\n    height: 80%;\r\n    margin: 30px auto;\r\n    background-color: var(--box-game);\r\n    border-radius: 5px;\r\n}\r\n\r\n.gameBox {\r\n    margin: 55px auto;\r\n    width: 80%;\r\n    height: 80%;\r\n    text-align: center;\r\n    background-color: black;\r\n    color: white;\r\n}\r\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,oCAAoC;IACpC,UAAU;IACV,SAAS;AACb;;AAEA;IACI,wBAAwB;IACxB,kBAAkB;IAClB,uBAAuB;IACvB,oBAAoB;IACpB,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,gBAAgB;IAChB,aAAa;IACb,6BAA6B;IAC7B,gBAAgB;AACpB;AACA;IACI,kBAAkB;AACtB;;AAEA,WAAW;AACX;IACI,eAAe;IACf,WAAW;IACX,aAAa;IACb,+BAA+B;IAC/B,qBAAqB;IACrB,kBAAkB;AACtB;AACA;IACI,iBAAiB;IACjB,eAAe;AACnB;AACA;IACI,sBAAsB;IACtB,yBAAyB;AAC7B;;AAEA;IACI,qBAAqB;IACrB,qBAAqB;AACzB;AACA;IACI,uBAAuB;IACvB,gBAAgB;AACpB;;AAEA,mBAAmB;AACnB;IACI,WAAW;IACX,aAAa;IACb,gCAAgC;IAChC,aAAa;AACjB;;AAEA,WAAW;AACX;IACI,yBAAyB;IACzB,kBAAkB;IAClB,SAAS;IACT,WAAW;IACX,YAAY;IACZ,cAAc;AAClB;AACA;IACI,cAAc;IACd,qBAAqB;AACzB;AACA;IACI,gBAAgB;AACpB;AACA;IACI,kBAAkB;IAClB,eAAe;AACnB;;AAEA,mBAAmB;AACnB;IACI,UAAU;IACV,WAAW;IACX,iBAAiB;IACjB,iCAAiC;IACjC,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;IACjB,UAAU;IACV,WAAW;IACX,kBAAkB;IAClB,uBAAuB;IACvB,YAAY;AAChB",sourcesContent:['* {\r\n    font-family: "Open Sans", sans-serif;\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\n\r\n:root {\r\n    --main-bg-color: #343233;\r\n    --color-a: #efeae1;\r\n    --header-color: #584b4f;\r\n    --enfasis-a: #81c08b;\r\n    --box-game: #ffd152;\r\n}\r\n\r\nhtml {\r\n    min-height: 100%;\r\n    position: relative;\r\n}\r\n\r\nul {\r\n    list-style: none;\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n    margin-top: 20px;\r\n}\r\nimg {\r\n    border-radius: 5px;\r\n}\r\n\r\n/* Header */\r\n.contenedorHeader {\r\n    cursor: pointer;\r\n    width: 100%;\r\n    height: 150px;\r\n    background: var(--header-color);\r\n    color: var(--color-a);\r\n    text-align: center;\r\n}\r\n.contenedorHeader h1 {\r\n    padding-top: 10px;\r\n    font-size: 50px;\r\n}\r\n.contenedorHeader h1:hover {\r\n    transform: scale(1.05);\r\n    transition: 0.3s ease all;\r\n}\r\n\r\n.contenedorHeader a {\r\n    color: var(--color-a);\r\n    text-decoration: none;\r\n}\r\n.contenedorHeader a:hover {\r\n    color: var(--enfasis-a);\r\n    font-weight: 600;\r\n}\r\n\r\n/* Tabla de Juego */\r\n.contenedorTable {\r\n    width: 100%;\r\n    height: 700px;\r\n    background: var(--main-bg-color);\r\n    display: flex;\r\n}\r\n\r\n/* Footer */\r\n.contenedorFooter {\r\n    background-color: #efeae1;\r\n    position: absolute;\r\n    bottom: 0;\r\n    width: 100%;\r\n    height: 80px;\r\n    color: #574c4f;\r\n}\r\n.contenedorFooter a {\r\n    color: #574c4f;\r\n    text-decoration: none;\r\n}\r\n.contenedorFooter a:hover {\r\n    font-weight: 600;\r\n}\r\nspan {\r\n    text-align: center;\r\n    cursor: pointer;\r\n}\r\n\r\n/* Flujo de juego */\r\n.game {\r\n    width: 40%;\r\n    height: 80%;\r\n    margin: 30px auto;\r\n    background-color: var(--box-game);\r\n    border-radius: 5px;\r\n}\r\n\r\n.gameBox {\r\n    margin: 55px auto;\r\n    width: 80%;\r\n    height: 80%;\r\n    text-align: center;\r\n    background-color: black;\r\n    color: white;\r\n}\r\n'],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var r=e(n);return n[2]?"@media ".concat(n[2]," {").concat(r,"}"):r})).join("")},n.i=function(e,r,t){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(t)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var c=0;c<e.length;c++){var A=[].concat(e[c]);t&&o[A[0]]||(r&&(A[2]?A[2]="".concat(r," and ").concat(A[2]):A[2]=r),n.push(A))}},n}},15:e=>{function n(e,n){(null==n||n>e.length)&&(n=e.length);for(var r=0,t=new Array(n);r<n;r++)t[r]=e[r];return t}e.exports=function(e){var r,t,o=(t=4,function(e){if(Array.isArray(e))return e}(r=e)||function(e,n){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var t,o,a=[],i=!0,c=!1;try{for(r=r.call(e);!(i=(t=r.next()).done)&&(a.push(t.value),!n||a.length!==n);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==r.return||r.return()}finally{if(c)throw o}}return a}}(r,t)||function(e,r){if(e){if("string"==typeof e)return n(e,r);var t=Object.prototype.toString.call(e).slice(8,-1);return"Object"===t&&e.constructor&&(t=e.constructor.name),"Map"===t||"Set"===t?Array.from(e):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?n(e,r):void 0}}(r,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if(!i)return a;if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),A="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),s="/*# ".concat(A," */"),d=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[a].concat(d).concat([s]).join("\n")}return[a].join("\n")}},379:e=>{var n=[];function r(e){for(var r=-1,t=0;t<n.length;t++)if(n[t].identifier===e){r=t;break}return r}function t(e,t){for(var a={},i=[],c=0;c<e.length;c++){var A=e[c],s=t.base?A[0]+t.base:A[0],d=a[s]||0,l="".concat(s," ").concat(d);a[s]=d+1;var u=r(l),p={css:A[1],media:A[2],sourceMap:A[3]};-1!==u?(n[u].references++,n[u].updater(p)):n.push({identifier:l,updater:o(p,t),references:1}),i.push(l)}return i}function o(e,n){var r=n.domAPI(n);return r.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r.update(e=n)}else r.remove()}}e.exports=function(e,o){var a=t(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=r(a[i]);n[c].references--}for(var A=t(e,o),s=0;s<a.length;s++){var d=r(a[s]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}a=A}}},569:e=>{var n={};e.exports=function(e,r){var t=function(e){if(void 0===n[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}n[e]=r}return n[e]}(e);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n),n}},565:(e,n,r)=>{e.exports=function(e){var n=r.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(r){!function(e,n,r){var t=r.css,o=r.media,a=r.sourceMap;o?e.setAttribute("media",o):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(t,e)}(n,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},553:(e,n,r)=>{e.exports=r.p+"51e138395d3ddecca71d.jpg"},850:(e,n,r)=>{e.exports=r.p+"a3dfb29c602a8132559f.jpg"},683:(e,n,r)=>{e.exports=r.p+"f2811526f7b67079a0b1.jpg"},754:(e,n,r)=>{e.exports=r.p+"166cfc5cd02210f492e1.jpg"},641:(e,n,r)=>{e.exports=r.p+"2cff1b4adf1e9fb138bb.jpg"},484:(e,n,r)=>{e.exports=r.p+"a15f33b5fee93fa8b1c8.jpg"},157:(e,n,r)=>{e.exports=r.p+"7c76a6a272961ebeae93.jpg"},67:(e,n,r)=>{e.exports=r.p+"330e4117a7d7100e266d.jpg"}},n={};function r(t){var o=n[t];if(void 0!==o)return o.exports;var a=n[t]={id:t,exports:{}};return e[t](a,a.exports,r),a.exports}r.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return r.d(n,{a:n}),n},r.d=(e,n)=>{for(var t in n)r.o(n,t)&&!r.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var n=r.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var t=n.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),(()=>{var e=r(379),n=r.n(e),t=r(795),o=r.n(t),a=r(569),i=r.n(a),c=r(565),A=r.n(c),s=r(216),d=r.n(s),l=r(589),u=r.n(l),p=r(426),m={};m.styleTagTransform=u(),m.setAttributes=A(),m.insert=i().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=d(),n()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals;var f=r(683),g=r(553),h=r(850),C=r(754),B=r(641),b=r(484),v=r(157),I=r(67);const x=document.querySelector(".main");let y={1:{imagen:f,frase:"Mantener Distancia"},2:{imagen:C,frase:"Lavarse las Manos"},3:{imagen:B,frase:"Usar mascarilla"},4:{imagen:b,frase:"Comer saludable"}},E={1:{imagen:g,frase:"Estar todos unidos"},2:{imagen:I,frase:"Covid - 19"},3:{imagen:v,frase:"No usar mascarilla"},4:{imagen:h,frase:"Comida Chatarra"}};function w(e,n,r){e.alt="Esta es una buena imagen",e.src=y[n].imagen,r.textContent=y[n].frase}function k(e,n,r){e.alt="Esta es una mala imagen",e.src=E[n].imagen,r.textContent=E[n].frase}const j=document.querySelector(".main");function S(){let e=document.createElement("ul"),n=document.createElement("li"),r=document.createElement("li"),t=document.createElement("li"),o=document.createElement("a"),a=document.createElement("a"),i=document.createElement("a");return o.target="_blank",o.href="https://github.com/Leninner/gameJam",a.target="_blank",a.href="https://www.linkedin.com/in/lenin-mazabanda-1370b41b2/",i.target="_blank",i.href="https://github.com/Leninner/gameJam/blob/main/README.md",o.textContent="Repo",a.textContent="LinkedIn",i.textContent="How to play?",n.appendChild(o),r.appendChild(a),t.appendChild(i),e.append(n,r,t),e}!function(){let e=document.createElement("div"),n=document.createElement("h1");n.innerHTML="Game Jam",e.classList.add("contenedorHeader"),e.append(n,S()),j.appendChild(e)}(),function(){let e=document.createElement("div"),n=document.createElement("div"),r=document.createElement("div");e.classList.add("contenedorTable"),n.classList.add("divItemOne","game"),r.classList.add("divItemTwo","game"),e.append(n,r),x.appendChild(e)}(),function(){const e=document.querySelector(".divItemOne"),n=document.querySelector(".divItemTwo");let r=document.createElement("img"),t=document.createElement("img"),o=document.createElement("div"),a=document.createElement("div"),i=document.createElement("h3"),c=document.createElement("h3");o.classList.add("gameBox"),a.classList.add("gameBox"),i.textContent=y[1].frase,c.textContent=E[1].frase,r.alt="Esta es una buena imagen",r.src=y[1].imagen,o.append(i,r),e.appendChild(o),t.alt="Esta es una mala imagen",t.src=E[1].imagen,a.append(c,t),n.appendChild(a);let A=2;e.addEventListener("click",(()=>{2==A?(w(r,2,i),k(t,2,c)):3==A?(w(r,3,i),k(t,3,c)):4==A?(w(r,4,i),k(t,4,c)):(w(r,1,i),k(t,1,c),A=1),A+=1})),n.addEventListener("click",(()=>{2==A?(w(r,2,i),k(t,2,c)):3==A?(w(r,3,i),k(t,3,c)):4==A?(w(r,4,i),k(t,4,c)):(w(r,1,i),k(t,1,c),A=1),A+=1}))}(),function(){let e=document.createElement("div"),n=document.createElement("span"),r=document.createElement("h3");r.textContent="Developed by Leninner",e.classList.add("contenedorFooter"),n.appendChild(r),e.append(n,S()),j.appendChild(e)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,